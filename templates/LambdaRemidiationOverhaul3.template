{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description"              : "EC2 Remediation. This template will create a temporary instance that will be used to attempt the repair of your instance. **WARNING** This template creates an Amazon EC2 instance and makes use of Lambda. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters"               : {
        "BrokenInstanceId" : {
            "Type" : "String",
            "Description" : "Enter the Instance ID of the broken instance, it can be in any region"
        },
        "SSH"              : {
            "Type" : "String",
            "Description" : "Adds a newly generated key with the name of your broken instance ID to authorized_keys on the broken instance eg. i-xxxxxxxxxxxxxxxxx.pem",
            "Default"     : "true",
            "AllowedValues" : [
                "true",
                "false"
            ]
        },
        "OwnSSH"           : {
            "Type" : "String",
            "Description" : "Choose true to use your own KeyPair",
            "Default"     : "false",
            "AllowedValues" : [
                "true",
                "false"
            ]
        },
        "WaitSnaphot"      : {
            "Type" : "String",
            "Description" : "Do you want to wait for the Snapshot to complete? (slower)",
            "Default"     : "false",
            "AllowedValues" : [
                "true",
                "false"
            ]
        },
        "EIPACK"           : {
            "Type" : "String",
            "Description" : "You acknowledge that your Public IP will change if you do not have an Elasic IP (EIP)",
            "AllowedValues" : [
                "Yes"
            ]
        },
        "SSHkeypair"       : {
            "Type" : "String",
            "Description" : "Enter the SSH key you want to use/create instead of creating a new one."
        },
        "AppendReplaceSSH" : {
            "Type" : "String",
            "Description" : "Do you want to append or replace the SSH Key",
            "Default"     : "Append",
            "AllowedValues" : [
                "Append",
                "Replace"
            ]
        },
        "skipchecks"       : {
            "Type" : "String",
            "Description" : "Skip all prerequisite checks, including tools permisions.",
            "Default"     : "true",
            "AllowedValues" : [
                "true",
                "false"
            ]
        },
        "skipcwlogs"       : {
            "Type" : "String",
            "Description" : "Skip cloudwatch logs configuration and logging.",
            "Default"     : "false",
            "AllowedValues" : [
                "true",
                "false"
            ]
        },
        "homepermissions"  : {
            "Type" : "String",
            "Description" : "Reset user home directory permissions to default",
            "Default"     : "true",
            "AllowedValues" : [
                "true",
                "false"
            ]
        },
        "rhelbug"          : {
            "Type" : "String",
            "Description" : "Check and repair known RHEL 6.4 ssh bug",
            "Default"     : "true",
            "AllowedValues" : [
                "true",
                "false"
            ]
        },
        "sshdconfig"       : {
            "Type" : "String",
            "Description" : "Check and repair common sshd_config problems",
            "Default"     : "true",
            "AllowedValues" : [
                "true",
                "false"
            ]
        },
        "checktmpinstance" : {
            "Type" : "String",
            "Description" : "Stopps after attaching volume to Temporary Instance",
            "Default"     : "false",
            "AllowedValues" : [
                "true",
                "false"
            ]
        }
    },
    "Metadata"                 : {
        "AWS::CloudFormation::Interface" : {
            "ParameterGroups" : [
                {
                    "Label" : {
                        "default" : "Which Instance would you like to repair?"
                    },
                    "Parameters" : [
                        "BrokenInstanceId"
                    ]
                },
                {
                    "Label" : {
                        "default" : "Extra SSH Settings (not required)"
                    },
                    "Parameters" : [
                        "OwnSSH",
                        "AppendReplaceSSH",
                        "SSHkeypair"
                    ]
                },
                {
                    "Label" : {
                        "default" : "Safety Checks"
                    },
                    "Parameters" : [
                        "WaitSnaphot",
                        "EIPACK",
                        "checktmpinstance"
                    ]
                },
                {
                    "Label" : {
                        "default" : "What would you like to repair?"
                    },
                    "Parameters" : [
                        "SSH",
                        "skipchecks",
                        "skipcwlogs",
                        "homepermissions",
                        "rhelbug",
                        "sshdconfig"
                    ]
                }
            ],
            "ParameterLabels" : {
                "BrokenInstanceId" : {
                    "default" : "Enter Broken Instance ID"
                },
                "AppendReplaceSSH" : {
                    "default" : "Append or Replace SSH Key?"
                },
                "skipchecks"       : {
                    "default" : "Skip Checks"
                },
                "WaitSnaphot"      : {
                    "default" : "Wait For Snapshot"
                },
                "EIPACK"           : {
                    "default" : "Ack Public IP Change"
                },
                "skipcwlogs"       : {
                    "default" : "Skip CloudWatch Logs"
                },
                "SSH"              : {
                    "default" : "Replace SSH Key"
                },
                "OwnSSH"           : {
                    "default" : "Use Own SSH KeyPair"
                },
                "homepermissions"  : {
                    "default" : "Reset /home Permissions"
                },
                "rhelbug"          : {
                    "default" : "RHEL 6.4 ssh bug"
                },
                "sshdconfig"       : {
                    "default" : "Repair sshd_config"
                },
                "SSHkeypair"       : {
                    "default" : "SSH KeyPair"
                },
                "checktmpinstance" : {
                    "default" : "Halt Process"
                }
            }
        }
    },
    "Conditions"               : {
        "SSHtrue" : {
            "Fn::Equals" : [
                {
                    "Ref" : "SSH"
                },
                "true"
            ]
        },
        "snaptrue" : {
            "Fn::Equals" : [
                {
                    "Ref" : "WaitSnaphot"
                },
                "true"
            ]
        },
        "EIPACKcon" : {
            "Fn::Equals" : [
                {
                    "Ref" : "EIPACK"
                },
                "Yes"
            ]
        },
        "OwnSSHtrue" : {
            "Fn::Equals" : [
                {
                    "Ref" : "OwnSSH"
                },
                "true"
            ]
        },
        "sshdconfigCON" : {
            "Fn::Equals" : [
                {
                    "Ref" : "sshdconfig"
                },
                "true"
            ]
        },
        "rhelbugCON"    : {
            "Fn::Equals" : [
                {
                    "Ref" : "rhelbug"
                },
                "true"
            ]
        },
        "skipcwlogsCON" : {
            "Fn::Equals" : [
                {
                    "Ref" : "skipcwlogs"
                },
                "true"
            ]
        },
        "skipchecksCON" : {
            "Fn::Equals" : [
                {
                    "Ref" : "skipchecks"
                },
                "true"
            ]
        },
        "homepermissionsCON" : {
            "Fn::Equals" : [
                {
                    "Ref" : "homepermissions"
                },
                "true"
            ]
        },
        "checktmpinstanceCON" : {
            "Fn::Equals" : [
                {
                    "Ref" : "checktmpinstance"
                },
                "true"
            ]
        }
    },
    "Resources"                : {
        "Keybucket" : {
            "Condition" : "SSHtrue",
            "Type"      : "AWS::S3::Bucket",
            "DependsOn" : [
                "CFNTemplateDelete",
                "DeleteTemplateExecutePermission"
            ],
            "Properties" : {
                "NotificationConfiguration" : {
                    "LambdaConfigurations" : [
                        {
                            "Event" : "s3:ObjectRemoved:*",
                            "Function" : {
                                "Fn::GetAtt" : [
                                    "CFNTemplateDelete",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                }
            },
            "DeletionPolicy" : "Retain"
        },
        "KeyTrigger" : {
            "Condition" : "SSHtrue",
            "DependsOn" : [
                "KeyCreate",
                "FindandStopTrigger"
            ],
            "Type"      : "Custom::MyResource",
            "Properties" : {
                "ServiceToken" : {
                    "Fn::GetAtt" : [
                        "KeyCreate",
                        "Arn"
                    ]
                },
                "accesskeyid"  : {
                    "Ref" : "RemidiateUserKey"
                },
                "secretaccesskey" : {
                    "Fn::GetAtt" : [
                        "RemidiateUserKey",
                        "SecretAccessKey"
                    ]
                },
                "userkey"         : {
                    "Fn::If" : [
                        "OwnSSHtrue",
                        {
                            "Ref" : "SSHkeypair"
                        },
                        {
                            "Ref" : "AWS::NoValue"
                        }
                    ]
                },
                "keyname"         : {
                    "Ref" : "BrokenInstanceId"
                },
                "KeyRegion"       : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "InstanceREGION"
                    ]
                },
                "instanceid"      : {
                    "Ref" : "BrokenInstanceId"
                },
                "bucketname"      : {
                    "Ref" : "Keybucket"
                }
            }
        },
        "KeyCreate"  : {
            "Condition" : "SSHtrue",
            "Type"      : "AWS::Lambda::Function",
            "DeletionPolicy" : "Delete",
            "DependsOn"      : [
                "IamRoleLambda",
                "RemidiateUserKey"
            ],
            "Properties"     : {
                "Code" : {
                    "ZipFile" : {
                        "Fn::Join" : [
                            "\n",
                            [
                                "var response = require('cfn-response');",
                                "var aws = require('aws-sdk');",
                                "exports.handler = function(event, context) {",
                                "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                                "    if (event.RequestType == 'Delete') {",
                                "        response.send(event, context, response.SUCCESS);",
                                "        return;",
                                "    }",
                                "    var userKEY = event.ResourceProperties.userkey || 0;",
                                "console.log(userKEY);",
                                "    var keyaccessKeyId = event.ResourceProperties.accesskeyid;",
                                "    var keysecretAccessKey = event.ResourceProperties.secretaccesskey;",
                                "    var keyregion = event.ResourceProperties.KeyRegion ;",
                                "var s3params = {",
                                "apiVersion: '2006-03-01',",
                                "accessKeyId: keyaccessKeyId,",
                                "secretAccessKey: keysecretAccessKey,",
                                "signatureVersion: 'v4',",
                                "region: keyregion",
                                "};",
                                "var KEYname = event.ResourceProperties.instanceid;",
                                "var INSTANCEid = event.ResourceProperties.instanceid;",
                                "var BucketNAME = event.ResourceProperties.bucketname;",
                                "var responseData = {};",
                                "if (userKEY == 0) {",
                                "var ec2 = new aws.EC2({apiVersion: '2016-09-15', region: keyregion});",
                                "var s3 = new aws.S3(s3params);",
                                "var params = {",
                                "KeyName: KEYname",
                                "}",
                                "ec2.createKeyPair(params, function(err, data) {",
                                "if (err) {",
                                "responseData = {Error: 'describeInstances call failed'};",
                                "console.log(responseData.Error + ':\\n', err);",
                                "response.send(event, context, response.FAILED, responseData);",
                                "}",
                                "else {",
                                "console.log(responseData + ':\\n', data.KeyMaterial);",
                                "responseData = {createdkeyname: data.KeyName};",
                                "var keyin = data.KeyMaterial;",
                                "var params1 = {",
                                "Bucket: BucketNAME,",
                                "Key: KEYname + '.pem',",
                                "Body: keyin",
                                "};",
                                "s3.putObject(params1, function(err, data) {",
                                "if (err) {",
                                "responseData = {Error: 'UploadPEM call failed'};",
                                "console.log(responseData.Error + ':\\n', err);",
                                "response.send(event, context, response.FAILED, responseData);",
                                "}",
                                "else {",
                                "console.log(responseData + ':\\n', 'back to stack');",
                                "response.send(event, context, response.SUCCESS, responseData);",
                                "}",
                                "});",
                                "}",
                                "});",
                                "}",
                                "else {",
                                "var ec2 = new aws.EC2({apiVersion: '2016-09-15', region: keyregion});",
                                "var desparams = {",
                                "KeyName: userKEY",
                                "}",
                                "console.log(desparams.KeyName);",
                                "ec2.createKeyPair(desparams, function(err, data) {",
                                "if (err) {",
                                "responseData = {createdkeyname: userKEY};",
                                "console.log('key is already created');",
                                "response.send(event, context, response.SUCCESS, responseData);",
                                "return;",
                                "}",
                                "else {",
                                "console.log('Key does not exsist creating one');",
                                "console.log(responseData + ':\\n', data.KeyMaterial);",
                                "responseData = {createdkeyname: data.KeyName};",
                                "var keyin = data.KeyMaterial;",
                                "    var params1 = {",
                                "    Bucket: BucketNAME,",
                                "    Key: userKEY + '.pem',",
                                "    Body: keyin",
                                "};",
                                "s3.putObject(params1, function(err, data) {",
                                "if (err) {",
                                "responseData = {Error: 'UploadPEM call failed'};",
                                "console.log(responseData.Error + ':\\n', err);",
                                "response.send(event, context, response.FAILED, responseData);",
                                "}",
                                "else {",
                                "console.log(responseData + ':\\n', 'back to stack');",
                                "response.send(event, context, response.SUCCESS, responseData);",
                                "                   }",
                                "           });",
                                " }",
                                "                     });",
                                "       }",
                                "};"
                            ]
                        ]
                    }
                },
                "Handler" : "index.handler",
                "MemorySize" : 128,
                "Role"       : {
                    "Fn::GetAtt" : [
                        "IamRoleLambda",
                        "Arn"
                    ]
                },
                "Runtime"    : "nodejs4.3",
                "Timeout"    : 100
            }
        },
        "DeleteBucket" : {
            "Condition" : "SSHtrue",
            "Type"      : "AWS::Lambda::Function",
            "DeletionPolicy" : "Retain",
            "DependsOn"      : [
                "IamRoleLambda",
                "Keybucket",
                "FindandStopTrigger"
            ],
            "Properties"     : {
                "Code" : {
                    "ZipFile" : {
                        "Fn::Join" : [
                            "",
                            [
                                "var response = require('cfn-response');",
                                "\n",
                                "exports.handler = function(event, context) {",
                                "\n",
                                "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                                "\n",
                                "    if (event.RequestType == 'Create') {",
                                "\n",
                                "        response.send(event, context, response.SUCCESS);",
                                "\n",
                                "        return;",
                                "\n",
                                "    }",
                                "\n",
                                "    if (event.RequestType == 'Delete') {",
                                "\n",
                                "    var KeyId = '",
                                {
                                    "Ref" : "RemidiateUserKey"
                                },
                                "';",
                                "\n",
                                "    var AKey = '",
                                {
                                    "Fn::GetAtt" : [
                                        "RemidiateUserKey",
                                        "SecretAccessKey"
                                    ]
                                },
                                "';",
                                "\n",
                                "    var Bname = '",
                                {
                                    "Ref" : "Keybucket"
                                },
                                "';",
                                "\n",
                                "    var s3params = {",
                                "\n",
                                "        apiVersion: '2006-03-01',",
                                "\n",
                                "        accessKeyId: KeyId,",
                                "\n",
                                "        secretAccessKey: AKey,",
                                "\n",
                                "        signatureVersion: 'v4',",
                                "\n",
                                "        region: '",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "'",
                                "\n",
                                "                    };",
                                "\n",
                                "    var responseData = {};",
                                "\n",
                                "    if (Bname) {",
                                "\n",
                                "        var aws = require('aws-sdk');",
                                "\n",
                                "        var s3 = new aws.S3(s3params);",
                                "\n",
                                "    var params1 = {",
                                "\n",
                                "                  Bucket: Bname",
                                "\n",
                                "                  };",
                                "\n",
                                "                              s3.deleteBucket(params1, function(err, data) {",
                                "\n",
                                "                                 if (err) {",
                                "\n",
                                "                                 responseData = {Error: 'Deleted bucket: ' + Bname + ' failed'};",
                                "\n",
                                "                                 console.log(responseData.Error + ':\\n', err);",
                                "\n",
                                "                                 response.send(event, context, response.FAILED, responseData);",
                                "\n",
                                "                                 }",
                                "\n",
                                "                                 else {",
                                "\n",
                                "                                 var responseData = data",
                                "\n",
                                "                                 console.log(responseData + ':\\n', Bname + 'Successfully Deleted');",
                                "\n",
                                "                                 response.send(event, context, response.SUCCESS);",
                                "\n",
                                "                                      }",
                                "\n",
                                "                                                                  });",
                                "\n",
                                "    }",
                                "\n",
                                "                 }",
                                "\n",
                                "        else {",
                                "\n",
                                "        responseData = {Error: 'Not all parameters specified'};",
                                "\n",
                                "        console.log(responseData.Error);",
                                "\n",
                                "        response.send(event, context, response.FAILED, responseData);",
                                "\n",
                                "    }",
                                "\n",
                                "};",
                                "\n",
                                "\n"
                            ]
                        ]
                    }
                },
                "Handler" : "index.handler",
                "MemorySize" : 128,
                "Role"       : {
                    "Fn::GetAtt" : [
                        "IamRoleLambda",
                        "Arn"
                    ]
                },
                "Runtime"    : "nodejs4.3",
                "Timeout"    : 100
            }
        },
        "Remidiateuser" : {
            "Type" : "AWS::IAM::User",
            "Properties" : {
                "Policies" : [
                    {
                        "PolicyDocument" : {
                            "Version" : "2012-10-17",
                            "Statement" : [
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "*",
                                        "iam:*"
                                    ],
                                    "Resource" : "*"
                                }
                            ]
                        },
                        "PolicyName"     : "S3AccessforPem"
                    }
                ]
            }
        },
        "RemidiateUserKey" : {
            "Type" : "AWS::IAM::AccessKey",
            "DependsOn" : "Remidiateuser",
            "Properties" : {
                "UserName" : {
                    "Ref" : "Remidiateuser"
                }
            }
        },
        "IamRoleLambda"    : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "lambda.amazonaws.com",
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action"    : [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path"                     : "/",
                "Policies"                 : [
                    {
                        "PolicyName" : "root",
                        "PolicyDocument" : {
                            "Version" : "2012-10-17",
                            "Statement" : [
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "*"
                                    ],
                                    "Resource" : "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "FindandStop"      : {
            "Type" : "AWS::Lambda::Function",
            "DeletionPolicy" : "Delete",
            "DependsOn"      : [
                "IamRoleLambda"
            ],
            "Properties"     : {
                "Code" : {
                    "ZipFile" : {
                        "Fn::Join" : [
                            "\n",
                            [
                                "var response = require('cfn-response');",
                                "exports.handler = function(event, context) {",
                                "console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                                "if (event.RequestType == 'Delete') {",
                                "response.send(event, context, response.SUCCESS);",
                                "return;",
                                "}",
                                "var INSTANCEid = event.ResourceProperties.instanceid;",
                                "var AccountID = event.ResourceProperties.Accountid;",
                                "var params = {};",
                                "var CountRegion = [];",
                                "var ec2params = {",
                                "InstanceIds: [ INSTANCEid,],",
                                "};",
                                "if (INSTANCEid) {",
                                "var aws = require('aws-sdk');",
                                "var ec2 = new aws.EC2({apiVersion: '2016-09-15'});",
                                "ec2.describeRegions(params, function(err, data) {",
                                "if (err) {",
                                "responseData = {Error: 'Issue with Getting Regions'};",
                                "console.log(responseData.Error + ':\\n', err);",
                                "response.send(event, context, response.FAILED, responseData);",
                                "}",
                                "else     {",
                                "var RegionTotalbefore = data.Regions.length;",
                                "data.Regions.forEach(function(value){",
                                "console.log(value.RegionName);",
                                "var ec2params = {",
                                "InstanceIds: [ INSTANCEid,],",
                                "};",
                                "var myec2  = new aws.EC2({region:value.RegionName});",
                                "myec2.describeInstances(ec2params, function(err, data) {",
                                "if (err) {",
                                "responseData = {Error: 'Instance not in region ' + value.RegionName + ': '};",
                                "CountRegion.push(err);",
                                "if (CountRegion.length == RegionTotalbefore) {",
                                "responseData = {Error: 'Instance (' + INSTANCEid + ') not under Account: ' + AccountID};",
                                "response.send(event, context, response.FAILED, responseData);",
                                "}",
                                "}",
                                "else     { ",
                                "console.log('instance:', JSON.stringify(data, null, 2));",
                                "var instanceAZ = data.Reservations[0].Instances[0].Placement.AvailabilityZone;",
                                "var brokenvolume = data.Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId;",
                                "var instancevpc = data.Reservations[0].Instances[0].VpcId || 0;",
                                "var instancesubnet = data.Reservations[0].Instances[0].SubnetId || 0;",
                                "var brokendevicename = data.Reservations[0].Instances[0].RootDeviceName;",
                                "var instanceRegionwitha = data.Reservations[0].Instances[0].Placement.AvailabilityZone;",
                                "var instanceRegionwitha = instanceRegionwitha.substring(0, instanceRegionwitha.length - 1);",
                                "if (instancevpc != 0) {                                         ",
                                "console.log('VPC id is: ' + instancevpc);",
                                "var vpcparams = { ",
                                "VpcIds: [",
                                "instancevpc",
                                "]",
                                "};",
                                "myec2.describeVpcs(vpcparams, function(err, data) {",
                                "if (err) {",
                                "console.log(err, err.stack); ",
                                "responseData = {Error: 'VPC issue'};",
                                "response.send(event, context, response.FAILED, responseData);",
                                "}",
                                "else  {",
                                "console.log(data);           ",
                                "var isdefault = data.Vpcs[0].IsDefault;",
                                "console.log(isdefault);",
                                "var paramsstop = { ",
                                "InstanceIds: [",
                                "INSTANCEid",
                                "]",
                                "};",
                                "myec2.stopInstances(paramsstop, function(err, data) {",
                                "if (err) {",
                                "responseData = {Error: 'Instance not in region'};",
                                "console.log(err, err.stack);",
                                "console.log('Unable to Stop instance for some reason');",
                                "response.send(event, context, response.FAILED, responseData);",
                                "} else  {",
                                "console.log('VPC');",
                                "responseData = {InstanceAZ: instanceAZ, InstanceREGION: instanceRegionwitha, BrokenVolume: brokenvolume, RootdeviceName: brokendevicename, VpcDefault: isdefault, instanceVPCID: instancevpc, instanceSUBNET: instancesubnet, instanceTYPE: 't2.micro', ia: 'HVM64'};",
                                "console.log(data.StoppingInstances[0].CurrentState.Name);",
                                "response.send(event, context, response.SUCCESS, responseData);",
                                "}});}",
                                "});",
                                "}",
                                " else {",
                                "var paramsstop = { ",
                                "InstanceIds: [",
                                "INSTANCEid",
                                "]",
                                "};",
                                "myec2.stopInstances(paramsstop, function(err, data) {",
                                "if (err) {",
                                "responseData = {Error: 'Instance not in region'};",
                                "console.log(err, err.stack);",
                                "console.log('Unable to Stop instance for some reason');",
                                "response.send(event, context, response.FAILED, responseData);",
                                "} else  {",
                                "console.log('Classic');",
                                "responseData = {InstanceAZ: instanceAZ, InstanceREGION: instanceRegionwitha, BrokenVolume: brokenvolume, RootdeviceName: brokendevicename, VpcDefault: 'Classic', instanceVPCID: 'NONE', instanceSUBNET: instancesubnet, instanceTYPE: 't1.micro', ia: 'PV64'};",
                                "console.log(data.StoppingInstances[0].CurrentState.Name);",
                                "response.send(event, context, response.SUCCESS, responseData);",
                                "}});",
                                "}",
                                "};});});};});} else {",
                                "responseData = {Error: 'Not all parameters specified'};",
                                "console.log(responseData.Error);",
                                "response.send(event, context, response.FAILED, responseData);",
                                "}",
                                "};"
                            ]
                        ]
                    }
                },
                "Handler" : "index.handler",
                "MemorySize" : 128,
                "Role"       : {
                    "Fn::GetAtt" : [
                        "IamRoleLambda",
                        "Arn"
                    ]
                },
                "Runtime"    : "nodejs4.3",
                "Timeout"    : 100
            }
        },
        "FindandStopTrigger" : {
            "DependsOn" : [
                "FindandStop"
            ],
            "Type"      : "Custom::FindandStop",
            "Properties" : {
                "ServiceToken" : {
                    "Fn::GetAtt" : [
                        "FindandStop",
                        "Arn"
                    ]
                },
                "instanceid"   : {
                    "Ref" : "BrokenInstanceId"
                },
                "Accountid"    : {
                    "Ref" : "AWS::AccountId"
                }
            }
        },
        "StartSnapShotEBSTrigger" : {
            "DependsOn" : [
                "StartSnapShotEBS",
                "FindandStopTrigger"
            ],
            "Type"      : "Custom::StartSnapShotEBS",
            "Properties" : {
                "ServiceToken" : {
                    "Fn::GetAtt" : [
                        "StartSnapShotEBS",
                        "Arn"
                    ]
                },
                "instanceid"   : {
                    "Ref" : "BrokenInstanceId"
                },
                "instanceregion" : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "InstanceREGION"
                    ]
                },
                "brokeninstancevol" : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "BrokenVolume"
                    ]
                }
            }
        },
        "StartSnapShotEBS"        : {
            "Type" : "AWS::Lambda::Function",
            "DeletionPolicy" : "Delete",
            "DependsOn"      : [
                "IamRoleLambda"
            ],
            "Properties"     : {
                "Code" : {
                    "ZipFile" : {
                        "Fn::Join" : [
                            "\n",
                            [
                                "var response = require('cfn-response');",
                                "var aws = require('aws-sdk');",
                                "exports.handler = (event, context, callback) => {",
                                "if (event.RequestType == 'Delete') {",
                                "console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                                "response.send(event, context, response.SUCCESS);",
                                "callback(null, 'success');",
                                "return;",
                                "}",
                                "else if (event.RequestType == 'Create' || event.RequestType == 'Update') {",
                                "console.log('REQUEST RECEIVED:\\n', JSON.stringify(context));",
                                "console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                                "var count = 0;",
                                "var intervalObject = setInterval(function() {",
                                "count++;",
                                "var currentseconds = (count * 15);",
                                "var InstanceID = event.ResourceProperties.instanceid;",
                                "var InstanceRegion = event.ResourceProperties.instanceregion;",
                                "var BrokenVolume = event.ResourceProperties.brokeninstancevol;",
                                "var SnapDec = 'backup-' + InstanceID + '-' + BrokenVolume;",
                                "var ec2 = new aws.EC2({",
                                "region: InstanceRegion",
                                "});",
                                "var waitparams = {",
                                "InstanceIds: [InstanceID]",
                                "};",
                                "ec2.describeInstances(waitparams, function(err, data) {",
                                "if (err) {",
                                "responseData = {",
                                "Error: 'Unable to find Instance ? '",
                                "};",
                                "console.log(responseData.Error + ':\\n', err);",
                                "response.send(event, context, response.FAILED, responseData);",
                                "//callback(Error);",
                                "return;",
                                "} else {",
                                "var StateStatus = data.Reservations[0].Instances[0].State.Name;",
                                "console.log('Current State: ' + StateStatus);",
                                "var ebsparams = {",
                                "Filters: [",
                                "{",
                                "Name: 'description',",
                                "Values: [SnapDec]",
                                "}",
                                "]",
                                "};",
                                "ec2.describeSnapshots(ebsparams, function(err, data) {",
                                "if (err) {",
                                "console.log(err, err.stack);",
                                "callback(Error);",
                                "} else {",
                                "var NoSnap = JSON.stringify(data).length",
                                "console.log('No resource : ' + NoSnap);",
                                "if (StateStatus == 'stopped' && NoSnap == '16') {",
                                "var ebsparams = {",
                                "VolumeId: BrokenVolume,",
                                "Description: 'backup-' + InstanceID + '-' + BrokenVolume",
                                "};",
                                "ec2.createSnapshot(ebsparams, function(err, ebsdata) {",
                                "if (err) {",
                                "console.log(err, err.stack);",
                                "console.log('unable to create snap');",
                                "callback(Error);",
                                "} else {",
                                "console.log(ebsdata);",
                                "var SnapId = ebsdata.SnapshotId;",
                                "responseData = {",
                                "InstanceState: StateStatus,",
                                "EbsSnapshotId: SnapId",
                                "};",
                                "response.send(event, context, response.SUCCESS, responseData);",
                                "console.log('SnapshotId: ' + JSON.stringify(SnapId));",
                                "callback(null, 'success');",
                                "}",
                                "});",
                                "} else if (StateStatus == 'stopped' && NoSnap > '16') {",
                                "console.log('TRYING TO END LAMDA WITH CLEARINTERVAL AND CALLBACKS BELOW');",
                                "clearInterval(intervalObject);",
                                "console.log('^ clearInterval');",
                                "callback(null, 'success');",
                                "console.log('^ callback(Error)');",
                                "return;",
                                "}",
                                "}",
                                "});",
                                "}",
                                "});",
                                "console.log(currentseconds, 'seconds passed');",
                                "if (count == 18) {",
                                "var FN = context.functionName;",
                                "var iparams = {",
                                "FunctionName: FN,",
                                "InvocationType: 'Event',",
                                "LogType: 'None',",
                                "Payload: JSON.stringify(event)",
                                "};",
                                "var lambda = new aws.Lambda({",
                                "apiVersion: '2015-03-31'",
                                "});",
                                "console.log('LambdaARN: ' + FN);",
                                "lambda.invoke(iparams, function(err, data) {",
                                "if (err) {",
                                "console.log(err, err.stack);",
                                "callback(Error);",
                                "return;",
                                "} else {",
                                "console.log('LambdaData: ' + JSON.stringify(data));",
                                "callback(null, 'success');",
                                "return;",
                                "}",
                                "});",
                                "clearInterval(intervalObject);",
                                "}",
                                "}, 15000);",
                                "callback(null, 'success');",
                                "}",
                                "};"
                            ]
                        ]
                    }
                },
                "Handler" : "index.handler",
                "MemorySize" : 128,
                "Role"       : {
                    "Fn::GetAtt" : [
                        "IamRoleLambda",
                        "Arn"
                    ]
                },
                "Runtime"    : "nodejs4.3",
                "Timeout"    : 300
            }
        },
        "CheckEBSStatusEBSTrigger" : {
            "DependsOn" : [
                "CheckEBSStatus",
                "StartSnapShotEBSTrigger"
            ],
            "Type"      : "Custom::CheckEBSStatus",
            "Properties" : {
                "ServiceToken" : {
                    "Fn::GetAtt" : [
                        "CheckEBSStatus",
                        "Arn"
                    ]
                },
                "instanceid"   : {
                    "Ref" : "BrokenInstanceId"
                },
                "instanceregion" : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "InstanceREGION"
                    ]
                },
                "snapcondish"    : {
                    "Fn::If" : [
                        "snaptrue",
                        "completed",
                        "pending"
                    ]
                },
                "SnapVolid"      : {
                    "Fn::GetAtt" : [
                        "StartSnapShotEBSTrigger",
                        "EbsSnapshotId"
                    ]
                },
                "brokeninstancevol" : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "BrokenVolume"
                    ]
                }
            }
        },
        "CheckEBSStatus"           : {
            "Type" : "AWS::Lambda::Function",
            "DeletionPolicy" : "Delete",
            "DependsOn"      : [
                "IamRoleLambda"
            ],
            "Properties"     : {
                "Code" : {
                    "ZipFile" : {
                        "Fn::Join" : [
                            "\n",
                            [
                                "var response = require('cfn-response');",
                                "var aws = require('aws-sdk');",
                                "exports.handler = (event, context, callback) => {",
                                "context.callbackWaitsForEmptyEventLoop = true;",
                                "if (event.RequestType == 'Delete') {",
                                "console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                                "response.send(event, context, response.SUCCESS);",
                                "//callback(Error);",
                                "return;",
                                "} else if (event.RequestType == 'Create' || event.RequestType == 'Update') {",
                                "console.log('REQUEST RECEIVED:\\n', JSON.stringify(context));",
                                "console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                                "var count = 0;",
                                "var intervalObject = setInterval(function() {",
                                "count++;",
                                "var currentseconds = (count * 15);",
                                "    var SNAPCON = event.ResourceProperties.snapcondish;",
                                "    var InstanceID = event.ResourceProperties.instanceid;",
                                "    var InstanceRegion = event.ResourceProperties.instanceregion;",
                                "    var BrokenVolume = event.ResourceProperties.brokeninstancevol;",
                                "    var SnapID = event.ResourceProperties.SnapVolid;",
                                "var ec2 = new aws.EC2({",
                                "region: InstanceRegion",
                                "});",
                                "var ebsparams = {",
                                "SnapshotIds: [",
                                "SnapID",
                                "]",
                                "};",
                                "ec2.describeSnapshots(ebsparams, function(err, data) {",
                                "if (err) {",
                                "responseData = {",
                                "Error: 'Unable to find ebs volume ? '",
                                "};",
                                "console.log(responseData.Error + ':\\n', err);",
                                "response.send(event, context, response.FAILED, responseData);",
                                "//callback(Error);",
                                "return;",
                                "} else {",
                                "console.log(JSON.stringify(data));",
                                "var EBSStatus = data.Snapshots[0].State; ",
                                "if (EBSStatus == 'completed' || EBSStatus == SNAPCON ) {",
                                "var ebsdetach = {",
                                "VolumeId: BrokenVolume,",
                                "};",
                                "ec2.detachVolume(ebsdetach, function(err, data) {",
                                "if (err) {",
                                "console.log(err, err.stack);",
                                "console.log('unable to create snap as its has been unmounted');",
                                "callback(null, 'success');",
                                "return;",
                                "} else {",
                                "console.log('volume detaching');",
                                "var device = data.Device;",
                                "var detachstate = data.State;",
                                "var VolID = data.VolumeId;",
                                "responseData = {Device: device, State: detachstate, VolumeId: VolID};",
                                "console.log(responseData);",
                                "response.send(event, context, response.SUCCESS, responseData);",
                                "callback(null, 'success');",
                                "clearInterval(intervalObject);",
                                "return;",
                                "}",
                                "});",
                                "} ",
                                "}",
                                "});",
                                "console.log(currentseconds, 'seconds passed');",
                                "if (count == 18) {",
                                "var FN = context.functionName;",
                                "var iparams = {",
                                "FunctionName: FN,",
                                "InvocationType: 'Event',",
                                "LogType: 'None',",
                                "Payload: JSON.stringify(event)",
                                "};",
                                "var lambda = new aws.Lambda({",
                                "apiVersion: '2015-03-31'",
                                "});",
                                "console.log('LambdaARN: ' + FN);",
                                "lambda.invoke(iparams, function(err, data) {",
                                "if (err) {",
                                "console.log(err, err.stack);",
                                "callback(Error);",
                                "return;",
                                "} else {",
                                "console.log('LambdaData: ' + JSON.stringify(data));",
                                "callback(null, 'success');",
                                "return;",
                                "}",
                                "});",
                                "clearInterval(intervalObject);",
                                "}",
                                "}, 15000);",
                                "callback(null, 'success');",
                                "return;",
                                "}",
                                "};"
                            ]
                        ]
                    }
                },
                "Handler" : "index.handler",
                "MemorySize" : 128,
                "Role"       : {
                    "Fn::GetAtt" : [
                        "IamRoleLambda",
                        "Arn"
                    ]
                },
                "Runtime"    : "nodejs4.3",
                "Timeout"    : 299
            }
        },
        "GetAMITrigger"            : {
            "DependsOn" : [
                "GetAMI",
                "FindandStopTrigger"
            ],
            "Type"      : "Custom::GetAMITrigger",
            "Properties" : {
                "ServiceToken" : {
                    "Fn::GetAtt" : [
                        "GetAMI",
                        "Arn"
                    ]
                },
                "Region"       : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "InstanceREGION"
                    ]
                },
                "Architecture" : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "ia"
                    ]
                }
            }
        },
        "GetAMI"                   : {
            "Type" : "AWS::Lambda::Function",
            "DeletionPolicy" : "Delete",
            "DependsOn"      : [
                "IamRoleLambda"
            ],
            "Properties"     : {
                "Code" : {
                    "ZipFile" : {
                        "Fn::Join" : [
                            "\n",
                            [
                                "// Map instance architectures to an AMI name pattern",
                                "var response = require('cfn-response');",
                                "var responseData = {};",
                                "var archToAMINamePattern = {",
                                "    'HVM64': 'amzn-ami-hvm*x86_64-gp2',",
                                "    'PV64': 'amzn-ami-pv*x86_64-ebs', ",
                                "};",
                                "var aws = require('aws-sdk');",
                                "exports.handler = function(event, context) {",
                                "    console.log('REQUEST RECEIVED: ' + JSON.stringify(event));",
                                "    // For Delete requests, immediately send a SUCCESS response.",
                                "    if (event.RequestType == 'Delete') {",
                                "                response.send(event, context, response.SUCCESS, responseData);",
                                "        return;",
                                "    }",
                                "    var ec2 = new aws.EC2({region: event.ResourceProperties.Region});",
                                "    var describeImagesParams = {",
                                "        Filters: [{ Name: 'name', Values: [archToAMINamePattern[event.ResourceProperties.Architecture]]}],",
                                "        Owners: [event.ResourceProperties.Architecture == 'HVMG2' ? '679593333241' : 'amazon']",
                                "    };",
                                "    // Get AMI IDs with the specified name pattern and owner",
                                "    ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {",
                                "        if (err) {",
                                "            responseData = {Error: 'DescribeImages call failed'};",
                                "            console.log(responseData.Error + ' : ', err);",
                                "        }",
                                "        else {",
                                "            var images = describeImagesResult.Images;",
                                "            // Sort images by name in decscending order. The names contain the AMI version, formatted as YYYY.MM.Ver.",
                                "            images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });",
                                "            for (var j = 0; j < images.length; j++) {",
                                "                if (isBeta(images[j].Name)) continue;",
                                "                responseStatus = 'SUCCESS';",
                                "                responseData['Id'] = images[j].ImageId;",
                                "                break;",
                                "            }",
                                "        }",
                                "                response.send(event, context, response.SUCCESS, responseData);",
                                "    });",
                                "};",
                                "// Check if the image is a beta or rc image. The Lambda function won't return any of those images.",
                                "function isBeta(imageName) {",
                                "    return imageName.toLowerCase().indexOf('beta') > -1 || imageName.toLowerCase().indexOf('.rc') > -1;",
                                "}"
                            ]
                        ]
                    }
                },
                "Handler" : "index.handler",
                "MemorySize" : 128,
                "Role"       : {
                    "Fn::GetAtt" : [
                        "IamRoleLambda",
                        "Arn"
                    ]
                },
                "Runtime"    : "nodejs4.3",
                "Timeout"    : 200
            }
        },
        "InstanceProfile"          : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : [
                    {
                        "Ref" : "Role"
                    }
                ]
            }
        },
        "Role"                     : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "ec2.amazonaws.com",
                                    "cloudformation.amazonaws.com"
                                ]
                            },
                            "Action"    : [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path"                     : "/",
                "Policies"                 : [
                    {
                        "PolicyName" : "root",
                        "PolicyDocument" : {
                            "Version" : "2012-10-17",
                            "Statement" : [
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "ec2:DescribeInstances",
                                        "ec2:StartInstances",
                                        "ec2:StopInstances",
                                        "ec2:DescribeVolumes",
                                        "ec2:AttachVolume",
                                        "ec2:DetachVolume",
                                        "ec2:DescribeSnapshots",
                                        "ec2:CreateSnapshot",
                                        "ec2:TerminateInstances"
                                    ],
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "cloudformation:DescribeStacks",
                                        "cloudformation:DescribeStackEvents",
                                        "cloudformation:DescribeStackResource",
                                        "cloudformation:DescribeStackResources",
                                        "cloudformation:DeleteStack",
                                        "cloudformation:UpdateStack"
                                    ],
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "lambda:*"
                                    ],
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "iam:*",
                                        "iam:DeleteUserPolicy"
                                    ],
                                    "Resource" : "*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName" : "ssm",
                        "PolicyDocument" : {
                            "Version" : "2012-10-17",
                            "Statement" : [
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "ssm:DescribeAssociation",
                                        "ssm:GetDeployablePatchSnapshotForInstance",
                                        "ssm:GetDocument",
                                        "ssm:GetParameters",
                                        "ssm:ListAssociations",
                                        "ssm:ListInstanceAssociations",
                                        "ssm:PutInventory",
                                        "ssm:UpdateAssociationStatus",
                                        "ssm:UpdateInstanceAssociationStatus",
                                        "ssm:UpdateInstanceInformation"
                                    ],
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "ec2messages:AcknowledgeMessage",
                                        "ec2messages:DeleteMessage",
                                        "ec2messages:FailMessage",
                                        "ec2messages:GetEndpoint",
                                        "ec2messages:GetMessages",
                                        "ec2messages:SendReply"
                                    ],
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "cloudwatch:PutMetricData"
                                    ],
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "ec2:DescribeInstanceStatus"
                                    ],
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "ds:CreateComputer",
                                        "ds:DescribeDirectories"
                                    ],
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:DescribeLogGroups",
                                        "logs:DescribeLogStreams",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "s3:AbortMultipartUpload",
                                        "s3:ListMultipartUploadParts",
                                        "s3:ListBucketMultipartUploads"
                                    ],
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "s3:ListBucket"
                                    ],
                                    "Resource" : "arn:aws:s3:::amazon-ssm-packages-*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName" : "logs",
                        "PolicyDocument" : {
                            "Version" : "2012-10-17",
                            "Statement" : [
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:DescribeLogStreams"
                                    ],
                                    "Resource" : "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "DeleteTemplateExecutePermission" : {
            "Type" : "AWS::Lambda::Permission",
            "Properties" : {
                "Action" : "lambda:InvokeFunction",
                "FunctionName" : {
                    "Fn::GetAtt" : [
                        "CFNTemplateDelete",
                        "Arn"
                    ]
                },
                "Principal"    : "*"
            },
            "DeletionPolicy" : "Retain"
        },
        "CFNTemplateDelete"               : {
            "Type" : "AWS::Lambda::Function",
            "DeletionPolicy" : "Delete",
            "DependsOn"      : [
                "IamRoleLambda"
            ],
            "Properties"     : {
                "Code" : {
                    "ZipFile" : {
                        "Fn::Join" : [
                            "",
                            [
                                "exports.handler = function(event, context) {",
                                "\n",
                                "    var CFNregion = '",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "';",
                                "\n",
                                "    var CFNname = '",
                                {
                                    "Ref" : "AWS::StackName"
                                },
                                "';",
                                "\n",
                                "    var responseData = {};",
                                "\n",
                                "    if (CFNname && CFNregion) {",
                                "\n",
                                "        var aws = require('aws-sdk');",
                                "\n",
                                "        var cloudformation = new aws.CloudFormation({apiVersion: '2010-05-15', region: CFNregion});",
                                "\n",
                                "        var params = {",
                                "\n",
                                "          StackName: CFNname",
                                "\n",
                                "           }",
                                "\n",
                                "        cloudformation.deleteStack(params, function(err, data) {",
                                "\n",
                                "            if (err) {",
                                "\n",
                                "                console.log('S3 lambda Failed to delete stack'+ CFNname);",
                                "\n",
                                "                console.log(err);",
                                "\n",
                                "            }",
                                "\n",
                                "            else {",
                                "\n",
                                "                console.log('S3 lambda deleted stack' + CFNname);",
                                "\n",
                                "            }",
                                "\n",
                                "        });",
                                "\n",
                                "    } else {",
                                "\n",
                                "        responseData = {Error: 'Not all parameters specified'};",
                                "\n",
                                "        console.log(responseData.Error);",
                                "\n",
                                "        response.send(event, context, response.FAILED, responseData);",
                                "\n",
                                "    }",
                                "\n",
                                "};",
                                "\n"
                            ]
                        ]
                    }
                },
                "Handler" : "index.handler",
                "MemorySize" : 128,
                "Role"       : {
                    "Fn::GetAtt" : [
                        "IamRoleLambda",
                        "Arn"
                    ]
                },
                "Runtime"    : "nodejs4.3",
                "Timeout"    : 100
            }
        },
        "GloabalInstanceTrigger"          : {
            "DependsOn" : [
                "GloabalInstance",
                "CheckEBSStatusEBSTrigger"
            ],
            "Type"      : "Custom::GloabalInstance",
            "Properties" : {
                "ServiceToken" : {
                    "Fn::GetAtt" : [
                        "GloabalInstance",
                        "Arn"
                    ]
                },
                "InstanceAZ"   : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "InstanceAZ"
                    ]
                },
                "ImageId"      : {
                    "Fn::GetAtt" : [
                        "GetAMITrigger",
                        "Id"
                    ]
                },
                "Instancerolename" : {
                    "Ref" : "InstanceProfile"
                },
                "Instancerolearn"  : {
                    "Fn::GetAtt" : [
                        "InstanceProfile",
                        "Arn"
                    ]
                },
                "brokeninstancevol" : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "BrokenVolume"
                    ]
                },
                "accesskeyid"       : {
                    "Ref" : "RemidiateUserKey"
                },
                "secretaccesskey"   : {
                    "Fn::GetAtt" : [
                        "RemidiateUserKey",
                        "SecretAccessKey"
                    ]
                },
                "SnapVolid"         : {
                    "Fn::GetAtt" : [
                        "StartSnapShotEBSTrigger",
                        "EbsSnapshotId"
                    ]
                },
                "isVpcDefault"      : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "VpcDefault"
                    ]
                },
                "isinstanceVPCID"   : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "instanceVPCID"
                    ]
                },
                "envinstancetype"   : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "instanceTYPE"
                    ]
                },
                "subnetInstance"    : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "instanceSUBNET"
                    ]
                },
                "ownkey"            : {
                    "Fn::If" : [
                        "OwnSSHtrue",
                        {
                            "Ref" : "SSHkeypair"
                        },
                        {
                            "Ref" : "BrokenInstanceId"
                        }
                    ]
                },
                "instanceregion"    : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "InstanceREGION"
                    ]
                },
                "instanceid"        : {
                    "Ref" : "BrokenInstanceId"
                }
            }
        },
        "GloabalInstance"                 : {
            "Type" : "AWS::Lambda::Function",
            "DeletionPolicy" : "Delete",
            "DependsOn"      : [
                "IamRoleLambda",
                "RemidiateUserKey"
            ],
            "Properties"     : {
                "Code" : {
                    "ZipFile" : {
                        "Fn::Join" : [
                            "",
                            [
                                "var response = require('cfn-response');",
                                "\n",
                                "var aws = require('aws-sdk');",
                                "\n",
                                "exports.handler = function(event, context) {",
                                "\n",
                                "var Accesskey = event.ResourceProperties.secretaccesskey;",
                                "\n",
                                "var vpcid = event.ResourceProperties.isinstanceVPCID;",
                                "\n",
                                "var ENVinstancetype = event.ResourceProperties.envinstancetype;",
                                "\n",
                                "var Subinstancetype = event.ResourceProperties.subnetInstance;",
                                "\n",
                                "var defaultvpc = event.ResourceProperties.isVpcDefault;",
                                "\n",
                                "var AccesssID = event.ResourceProperties.accesskeyid;",
                                "\n",
                                "var SSHKey = event.ResourceProperties.ownkey;",
                                "\n",
                                "var CFNregion = process.env.AWS_REGION;",
                                "\n",
                                "var CFNstackname = process.env.STACK_NAME;",
                                "\n",
                                "console.log('SSHKEY: ' + SSHKey)",
                                "\n",
                                "var b = new Buffer('\\",
                                "\n",
                                "#!/bin/bash\\n\\",
                                "\n",
                                "yum install -y aws-cfn-bootstrap\\n\\",
                                "\n",
                                "yum install jq -y\\n\\",
                                "\n",
                                "cd /tmp\\n\\",
                                "\n",
                                "wget https://ec2remediation.s3.amazonaws.com/ec2_rescue_mod.sh\\n\\",
                                "\n",
                                "chmod +x ec2_rescue_mod.sh\\n\\",
                                "\n",
                                "bash ec2_rescue_mod.sh ",
                                {
                                    "Ref" : "BrokenInstanceId"
                                },
                                {
                                    "Fn::If" : [
                                        "sshdconfigCON",
                                        " --sshd-config",
                                        ""
                                    ]
                                },
                                {
                                    "Fn::If" : [
                                        "skipchecksCON",
                                        " --skip-checks",
                                        ""
                                    ]
                                },
                                {
                                    "Fn::If" : [
                                        "skipcwlogsCON",
                                        " --skip-cwlogs",
                                        ""
                                    ]
                                },
                                {
                                    "Fn::If" : [
                                        "homepermissionsCON",
                                        " --home-permissions",
                                        ""
                                    ]
                                },
                                {
                                    "Fn::If" : [
                                        "rhelbugCON",
                                        " --rhel-bug",
                                        ""
                                    ]
                                },
                                {
                                    "Fn::If" : [
                                        "SSHtrue",
                                        " --ssh-key",
                                        {
                                            "Ref" : "AWS::NoValue"
                                        }
                                    ]
                                },
                                " --stop\\n\\",
                                "\n",
                                "sleep 60\\n\\",
                                "\n",
                                {
                                    "Fn::If" : [
                                        "checktmpinstanceCON",
                                        {
                                            "Ref" : "AWS::NoValue"
                                        },
                                        {
                                            "Fn::Join" : [
                                                "",
                                                [
                                                    "aws lambda invoke --function-name ",
                                                    {
                                                        "Fn::GetAtt" : [
                                                            "CFNTemplateDelete",
                                                            "Arn"
                                                        ]
                                                    },
                                                    " --region ",
                                                    {
                                                        "Ref" : "AWS::Region"
                                                    },
                                                    " /tmp/lambdaout\\n\\"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                "\n",
                                "');  ",
                                "\n",
                                "var s = b.toString('base64');  ",
                                "\n",
                                "console.log(s);  ",
                                "\n",
                                "var InstanceIDs = event.ResourceProperties.instanceid;",
                                "\n",
                                "var InstanceRegion = event.ResourceProperties.instanceregion;",
                                "\n",
                                "var AZ = event.ResourceProperties.InstanceAZ;",
                                "\n",
                                "var BrokenVolume = event.ResourceProperties.brokeninstancevol;",
                                "\n",
                                "var SnapID = event.ResourceProperties.SnapVolid;",
                                "\n",
                                "var imageid = event.ResourceProperties.ImageId;",
                                "\n",
                                "var instanceroleARN = event.ResourceProperties.Instancerolearn;",
                                "\n",
                                "var instanceroleNAME = event.ResourceProperties.Instancerolename;",
                                "\n",
                                "var responseData = {};",
                                "\n",
                                "console.log('REQUEST RECEIVED: ' + JSON.stringify(event));",
                                "\n",
                                "if (event.RequestType == 'Delete') {",
                                "\n",
                                "response.send(event, context, response.SUCCESS);",
                                "\n",
                                "return;",
                                "\n",
                                "}",
                                "\n",
                                "else if (event.RequestType == 'Create') {",
                                "\n",
                                "var ec2 = new aws.EC2({region: InstanceRegion});",
                                "\n",
                                "var params = {",
                                "\n",
                                "ImageId: imageid,",
                                "\n",
                                "MaxCount: '1',",
                                "\n",
                                "MinCount: '1',",
                                "\n",
                                "IamInstanceProfile: {",
                                "\n",
                                "Arn: instanceroleARN",
                                "\n",
                                "},",
                                "\n",
                                "Monitoring: {",
                                "\n",
                                "Enabled: false ",
                                "\n",
                                "},",
                                "\n",
                                "InstanceType: ENVinstancetype,",
                                "\n",
                                "Placement: {",
                                "\n",
                                "AvailabilityZone: AZ",
                                "\n",
                                "},",
                                "\n",
                                "KeyName: SSHKey,",
                                "\n",
                                "UserData: s",
                                "\n",
                                "}",
                                "\n",
                                "if (defaultvpc == 'false' ) {",
                                "\n",
                                "params.SubnetId = Subinstancetype;    ",
                                "\n",
                                "}",
                                "\n",
                                "var ec2 = new aws.EC2({",
                                "region: InstanceRegion",
                                "\n",
                                "});",
                                "\n",
                                "ec2.runInstances(params, function(err, data) {",
                                "\n",
                                "if (err) {",
                                "\n",
                                "console.log(err);",
                                "\n",
                                "response.send(event, context, response.FAILED, responseData);",
                                "\n",
                                "} else {",
                                "\n",
                                "console.log('STARTING INSTANCE FOR THE 1ST TIME AND WAITING FOR IT TO BECOME AVAILABLE');",
                                "\n",
                                "var thisinstance = data.Instances[0].InstanceId;",
                                "\n",
                                "console.log(thisinstance);",
                                "\n",
                                "var params1 = {",
                                "\n",
                                "InstanceIds: [thisinstance,],",
                                "\n",
                                "};",
                                "\n",
                                "ec2.waitFor('instanceRunning', params1, function(err, data) {",
                                "\n",
                                "if (err) {",
                                "\n",
                                "console.log(err);",
                                "\n",
                                "response.send(event, context, response.FAILED, responseData);",
                                "\n",
                                "} else {",
                                "\n",
                                "console.log('INSTANCE IS UP + STOPPING IT NOW');",
                                "\n",
                                "ec2.stopInstances(params1, function(err, data) {",
                                "\n",
                                "if (err) {",
                                "\n",
                                "console.log(err);",
                                "\n",
                                "response.send(event, context, response.FAILED, responseData);",
                                "\n",
                                "} else {",
                                "\n",
                                "console.log('WAITING FOR IT TO STOP');",
                                "\n",
                                "ec2.waitFor('instanceStopped', params1, function(err, data) {",
                                "\n",
                                "if (err) {",
                                "\n",
                                "console.log(err);",
                                "\n",
                                "response.send(event, context, response.FAILED, responseData);",
                                "\n",
                                "} else {",
                                "\n",
                                "console.log('INSTANCE STOPPED SO I CAN ATTACH VOLUME');",
                                "\n",
                                "var params2 = {",
                                "\n",
                                "Device: '/dev/sdf',",
                                "\n",
                                "InstanceId: thisinstance,",
                                "\n",
                                "VolumeId: BrokenVolume",
                                "\n",
                                "};",
                                "\n",
                                "ec2.attachVolume(params2, function(err, data) {",
                                "\n",
                                "if (err) {",
                                "\n",
                                "console.log(err);",
                                "\n",
                                "response.send(event, context, response.FAILED, responseData);",
                                "\n",
                                "console.log('VOLUME ATTACHED + STARTING INSTANCE');",
                                "\n",
                                "} else {",
                                "\n",
                                "ec2.startInstances(params1, function(err, data) {",
                                "\n",
                                "if (err) {",
                                "\n",
                                "console.log(err);",
                                "\n",
                                "response.send(event, context, response.FAILED, responseData);",
                                "\n",
                                "} else {",
                                "\n",
                                "console.log(JSON.stringify(data));",
                                "\n",
                                "responseData = {OldInstance: InstanceIDs, TempInstance: thisinstance};",
                                "\n",
                                "console.log('INSTANCE STARTED WITH VOLUME HOPEFULLY');",
                                "\n",
                                "response.send(event, context, response.SUCCESS, responseData);",
                                "\n",
                                "}});}});}});}});}});}});",
                                "\n",
                                "} else {",
                                "\n",
                                "responseData = {",
                                "\n",
                                "Error: 'Not all parameters specified'",
                                "\n",
                                "};",
                                "\n",
                                "console.log(responseData.Error);",
                                "\n",
                                "response.send(event, context, response.FAILED, responseData);",
                                "\n",
                                "}",
                                "\n",
                                "};",
                                "\n"
                            ]
                        ]
                    }
                },
                "Handler" : "index.handler",
                "MemorySize" : 128,
                "Role"       : {
                    "Fn::GetAtt" : [
                        "IamRoleLambda",
                        "Arn"
                    ]
                },
                "Runtime"    : "nodejs4.3",
                "Timeout"    : 300
            }
        },
        "RevertMountTrigger"              : {
            "DependsOn" : [
                "GloabalInstanceTrigger",
                "StartSnapShotEBSTrigger"
            ],
            "Type"      : "Custom::RevertMount",
            "Properties" : {
                "ServiceToken" : {
                    "Fn::GetAtt" : [
                        "RevertMount",
                        "Arn"
                    ]
                },
                "instanceid"   : {
                    "Ref" : "BrokenInstanceId"
                },
                "tempinstance" : {
                    "Fn::GetAtt" : [
                        "GloabalInstanceTrigger",
                        "TempInstance"
                    ]
                },
                "instanceregion" : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "InstanceREGION"
                    ]
                },
                "rootname"       : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "RootdeviceName"
                    ]
                },
                "brokeninstancevol" : {
                    "Fn::GetAtt" : [
                        "FindandStopTrigger",
                        "BrokenVolume"
                    ]
                }
            }
        },
        "RevertMount"                     : {
            "Type" : "AWS::Lambda::Function",
            "DeletionPolicy" : "Delete",
            "DependsOn"      : [
                "IamRoleLambda"
            ],
            "Properties"     : {
                "Code" : {
                    "ZipFile" : {
                        "Fn::Join" : [
                            "\n",
                            [
                                "var response = require('cfn-response');",
                                "var aws = require('aws-sdk');",
                                "exports.handler = (event, context, callback) => {",
                                "if (event.RequestType == 'Create' || event.RequestType == 'Update') {",
                                "console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                                "response.send(event, context, response.SUCCESS);",
                                "callback(null, 'success');",
                                "return;",
                                "} else {",
                                "console.log('REQUEST RECEIVED:\\n', JSON.stringify(context));",
                                "console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                                "var InstanceID = event.ResourceProperties.instanceid;",
                                "var InstanceRegion = event.ResourceProperties.instanceregion;",
                                "var BrokenVolume = event.ResourceProperties.brokeninstancevol;",
                                "var BrokenVolumeName = event.ResourceProperties.rootname;",
                                "var responseData = {};",
                                "var TEMPInstance = event.ResourceProperties.tempinstance;",
                                "var ec2 = new aws.EC2({region: InstanceRegion});",
                                "var termparams = {",
                                "InstanceIds: [TEMPInstance]",
                                "};",
                                "ec2.terminateInstances(termparams, function(err, data) {",
                                "if (err) {",
                                "responseData = {Error: 'Unable to find Instance'};",
                                "console.log(responseData.Error + ':\\n', err);",
                                "response.send(event, context, response.FAILED, responseData);",
                                "return;",
                                "} else {",
                                "console.log(JSON.stringify(data));",
                                "console.log('TERMINATING');",
                                "ec2.waitFor('instanceTerminated', termparams, function(err, data) {",
                                "if (err) {",
                                "responseData = {Error: 'Unable to termiate Instance'};",
                                "console.log(responseData.Error + ':\\n', err);",
                                "response.send(event, context, response.FAILED, responseData);",
                                "return;",
                                "} else {",
                                "console.log(data);",
                                "console.log('Instance' + TEMPInstance + 'is terminated, mounting Volume now');",
                                "var volparams = {",
                                "Device: BrokenVolumeName,",
                                "InstanceId: InstanceID,",
                                "VolumeId: BrokenVolume",
                                "};",
                                "ec2.attachVolume(volparams, function(err, data) {",
                                "if (err) {",
                                "responseData = {Error: 'Unable to attach vol to instance'};",
                                "console.log(responseData.Error + ':\\n', err);",
                                "response.send(event, context, response.FAILED, responseData);",
                                "return;",
                                "}",
                                "else {",
                                "console.log(data);",
                                "console.log('attached volume' + BrokenVolume + 'to original instance again' + InstanceID);",
                                "var startparams = {",
                                "InstanceIds: [",
                                "InstanceID",
                                "],",
                                "};",
                                "ec2.startInstances(startparams, function(err, data) {",
                                "if (err) {",
                                "responseData = {Error: 'Unable to start instance'};",
                                "console.log(responseData.Error + ':\\n', err);",
                                "response.send(event, context, response.FAILED, responseData);",
                                "return;",
                                "}",
                                "else {",
                                "console.log(data);",
                                "console.log('instance started with volume attached hoefully.');",
                                "var responseData = data;",
                                "response.send(event, context, response.SUCCESS, responseData);",
                                "} ",
                                "});",
                                "}",
                                "});",
                                "}",
                                "});",
                                "}",
                                "});",
                                "}",
                                "}"
                            ]
                        ]
                    }
                },
                "Handler" : "index.handler",
                "MemorySize" : 128,
                "Role"       : {
                    "Fn::GetAtt" : [
                        "IamRoleLambda",
                        "Arn"
                    ]
                },
                "Runtime"    : "nodejs4.3",
                "Timeout"    : 300
            }
        }
    },
    "Outputs"                  : {
        "PemKeyLocation" : {
            "Condition" : "SSHtrue",
            "Description" : "Location of your New KeyPair",
            "Value"       : {
                "Fn::Join" : [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt" : [
                                "FindandStopTrigger",
                                "InstanceREGION"
                            ]
                        },
                        "/",
                        {
                            "Ref" : "Keybucket"
                        },
                        "/",
                        {
                            "Fn::GetAtt" : [
                                "KeyTrigger",
                                "createdkeyname"
                            ]
                        },
                        ".pem"
                    ]
                ]
            }
        },
        "LambdaLogKeyCreate" : {
            "Description" : "Information about the value",
            "Value"       : {
                "Fn::Join" : [
                    "",
                    [
                        "https://",
                        {
                            "Ref" : "AWS::Region"
                        },
                        ".console.aws.amazon.com/cloudwatch/home?region=",
                        {
                            "Ref" : "AWS::Region"
                        },
                        "#logStream:group=/aws/lambda/",
                        {
                            "Ref" : "KeyCreate"
                        }
                    ]
                ]
            }
        },
        "LambdaLogDeleteBucket" : {
            "Description" : "Information about the value",
            "Value"       : {
                "Fn::Join" : [
                    "",
                    [
                        "https://",
                        {
                            "Ref" : "AWS::Region"
                        },
                        ".console.aws.amazon.com/cloudwatch/home?region=",
                        {
                            "Ref" : "AWS::Region"
                        },
                        "#logStream:group=/aws/lambda/",
                        {
                            "Ref" : "DeleteBucket"
                        }
                    ]
                ]
            }
        },
        "LambdaLogFindandStop"  : {
            "Description" : "Information about the value",
            "Value"       : {
                "Fn::Join" : [
                    "",
                    [
                        "https://",
                        {
                            "Ref" : "AWS::Region"
                        },
                        ".console.aws.amazon.com/cloudwatch/home?region=",
                        {
                            "Ref" : "AWS::Region"
                        },
                        "#logStream:group=/aws/lambda/",
                        {
                            "Ref" : "FindandStop"
                        }
                    ]
                ]
            }
        },
        "LambdaLogStartSnapShotEBS" : {
            "Description" : "Logging for Lambda Function",
            "Value"       : {
                "Fn::Join" : [
                    "",
                    [
                        "https://",
                        {
                            "Ref" : "AWS::Region"
                        },
                        ".console.aws.amazon.com/cloudwatch/home?region=",
                        {
                            "Ref" : "AWS::Region"
                        },
                        "#logStream:group=/aws/lambda/",
                        {
                            "Ref" : "StartSnapShotEBS"
                        }
                    ]
                ]
            }
        },
        "LambdaLogCheckEBSStatus"   : {
            "Description" : "Logging for Lambda Function",
            "Value"       : {
                "Fn::Join" : [
                    "",
                    [
                        "https://",
                        {
                            "Ref" : "AWS::Region"
                        },
                        ".console.aws.amazon.com/cloudwatch/home?region=",
                        {
                            "Ref" : "AWS::Region"
                        },
                        "#logStream:group=/aws/lambda/",
                        {
                            "Ref" : "CheckEBSStatus"
                        }
                    ]
                ]
            }
        },
        "LambdaLogGetAMI"           : {
            "Description" : "Logging for Lambda Function",
            "Value"       : {
                "Fn::Join" : [
                    "",
                    [
                        "https://",
                        {
                            "Ref" : "AWS::Region"
                        },
                        ".console.aws.amazon.com/cloudwatch/home?region=",
                        {
                            "Ref" : "AWS::Region"
                        },
                        "#logStream:group=/aws/lambda/",
                        {
                            "Ref" : "GetAMI"
                        }
                    ]
                ]
            }
        },
        "LambdaLogCFNTemplateDelete" : {
            "Description" : "Logging for Lambda Function",
            "Value"       : {
                "Fn::Join" : [
                    "",
                    [
                        "https://",
                        {
                            "Ref" : "AWS::Region"
                        },
                        ".console.aws.amazon.com/cloudwatch/home?region=",
                        {
                            "Ref" : "AWS::Region"
                        },
                        "#logStream:group=/aws/lambda/",
                        {
                            "Ref" : "CFNTemplateDelete"
                        }
                    ]
                ]
            }
        },
        "LambdaLogGloabalInstance"   : {
            "Description" : "Logging for Lambda Function",
            "Value"       : {
                "Fn::Join" : [
                    "",
                    [
                        "https://",
                        {
                            "Ref" : "AWS::Region"
                        },
                        ".console.aws.amazon.com/cloudwatch/home?region=",
                        {
                            "Ref" : "AWS::Region"
                        },
                        "#logStream:group=/aws/lambda/",
                        {
                            "Ref" : "GloabalInstance"
                        }
                    ]
                ]
            }
        },
        "LambdaLogRevertMount"       : {
            "Description" : "Logging for Lambda Function",
            "Value"       : {
                "Fn::Join" : [
                    "",
                    [
                        "https://",
                        {
                            "Ref" : "AWS::Region"
                        },
                        ".console.aws.amazon.com/cloudwatch/home?region=",
                        {
                            "Ref" : "AWS::Region"
                        },
                        "#logStream:group=/aws/lambda/",
                        {
                            "Ref" : "RevertMount"
                        }
                    ]
                ]
            }
        },
        "InstanceLogprogress"        : {
            "Value" : {
                "Fn::Join" : [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt" : [
                                "FindandStopTrigger",
                                "InstanceREGION"
                            ]
                        },
                        ".console.aws.amazon.com/cloudwatch/home?region=",
                        {
                            "Fn::GetAtt" : [
                                "FindandStopTrigger",
                                "InstanceREGION"
                            ]
                        },
                        "#logEvent:group=",
                        {
                            "Ref" : "BrokenInstanceId"
                        },
                        "_remediation;stream=progress"
                    ]
                ]
            },
            "Description" : "Progress Log"
        },
        "InstanceLogzzzdebug"        : {
            "Value" : {
                "Fn::Join" : [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt" : [
                                "FindandStopTrigger",
                                "InstanceREGION"
                            ]
                        },
                        ".console.aws.amazon.com/cloudwatch/home?region=",
                        {
                            "Fn::GetAtt" : [
                                "FindandStopTrigger",
                                "InstanceREGION"
                            ]
                        },
                        "#logEvent:group=",
                        {
                            "Ref" : "BrokenInstanceId"
                        },
                        "_remediation;stream=zzz_debug"
                    ]
                ]
            },
            "Description" : "Debug Log"
        }
    }
}